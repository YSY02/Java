import java.util.Scanner;

/**
 * 一个数组有 N 个元素，求连续子数组的最大和。
 * 例如：[-1,2,1]，和最大的连续子数组为[2,1]，其和为 3
 * 输入描述：
 * 输入为两行。 第一行一个整数n(1 <= n <= 100000)，表示一共有n个元素
 * 第二行为n个数，即每个元素,每个 整数都在32位int范围内。以空格分隔。
 * 输出描述： 所有连续子数组中和最大的值。 示例1: 输入3 -1 2 1 输出3
 *
 * 思路：直接进行累加，与最大值比较，并不停地更替最大值
 */
public class Main {
    public static void main(String[] args) {
        Scanner sc=new Scanner(System.in);
        //int n=0;
        while (sc.hasNext()){
            int n=sc.nextInt();
            int[] num=new int[n];
            for (int i=0;i<n;i++){
                num[i]=sc.nextInt();
            }
            int result=maxArraySum(num,n);
            System.out.println(result);
        }
    }

    public static int maxArraySum(int[] array,int len){
        if (array==null||len<0)
            return -1;
        int maxNum=0x80000000;//0x80000000 = -2147483648
        int sum=0;
        for (int i=0;i<len;i++){
            if(sum<=0){//还没开始求和，array[i]赋值给sum
                sum=array[i];
            }else {
                sum+=array[i];
            }
            if(sum>maxNum){
                maxNum=sum;
            }
        }
        return maxNum;
    }
}
