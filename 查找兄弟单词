import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.Scanner;

/**
 * 【题目解析】：
 * 兄弟单词的含义: 两个单词不同, 长度相同, 但是构成的字母顺序不相同
 * 输入描述: 先输入字典中单词的个数n，再输入n个单词作为字典单词。 
 * 再输入一个单词，查找其在字典中兄弟单词的个数m 再输入数字k
 * 
 * 输出描述: 根据输入，输出查找到的兄弟单词的个数m 
 * 然后输出查找到的兄弟单词的第k个单词。 
 * 注意!! 一定要关注最终返回的第 k 个单词这样的序号, 不能搞错.
 * 题意说的是 "字典", 因此要将里面的单词按照字典序排序~否则得到的 k 会存在问题
 *
 * 【解题思路】：
 * 1. 将字典中的单词先放到 vector 中 2. 将 vector 进行排序
 * 3. isBrother 函数依次判定每个输入的单词是否是兄弟单词
 * 4. 判定兄弟单词的规则是
 *     1. 先判定长度
 *     2. 如果长度相同, 再看是否是完全相同(完全相同不算兄弟)
 *     3. 然后将两个单词排序, 排序相同才是真兄弟单词.
 */
public class Main6 {
    public static void main(String[] args) {
        Scanner sc=new Scanner(System.in);
        while (sc.hasNext()){
            int num=sc.nextInt();
            String[] s=new String[num];
            int count=0;
            for(int i=0;i<num;i++){
                s[i]=sc.next();
            }
            String key=sc.next();
            char[] keyChar=key.toCharArray();
            Arrays.sort(keyChar);
            int No=sc.nextInt();//第几个
            ArrayList<String> list=new ArrayList<>();
            for (int i=0;i<num;i++){
                int c = check(key,s[i],keyChar);
                count += c;
                if(c==1)
                    list.add(s[i]);
            }
            System.out.println(count);
            Collections.sort(list);
            if(count>=No)
                System.out.println(list.get(No-1));
        }
    }

    //核心的比较函数，keyChar在调用的时候已经排好序了
    public static int check(String key,String word,char[] keyChar){
        //将两个单词按照字符排序后看是否相同
        if(key.equals(word)||key.length()!=word.length())
            return 0;
        char[] wordChar=word.toCharArray();
        Arrays.sort(wordChar);
        return Arrays.equals(keyChar,wordChar)?1:0;
    }
}
