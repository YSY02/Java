import java.util.Scanner;

/**
 * 开发一个坐标计算工具， A表示向左移动，D表示向右移动，W表示向上移动，S表示向下移动。
 * 从（0,0）点 开始移动，从输入字符串里面读取一些坐标，并将最终输入结果输出到输出文件里面。
 * 输入： 合法坐标为A(或者D或者W或者S) + 数字（两位以内）    坐标之间以;分隔
 * 非法坐标点需要进行丢弃。如AA10; A1A; $%$; YAD; 等
 * 示例：A10;S20;W10;D30;X;A1A;B10A11;;A10;
 * 输出： 最终坐标，以,分隔（10，-10）
 *
 * 思路：先将整个字符串用分号";"进行分割，这样就把每一个坐标给取出来了。
 * 接下来对取出的每个坐标进行合法性判断和计算，
 * 使用正则表达式。"[0-9]{1,2}"表示1～2个数字 。
 * 如果是： [0-9]+ 表示：表示至少1个、最多不限制的数字串 。如1,12，123,123556684
 */
public class Main1 {
    public static void main(String[] args) {
        Scanner sc=new Scanner(System.in);
        while (sc.hasNext()){
            String str=sc.nextLine();
            String[] A=str.split(";");////使用;切割录入的字符串数据,返回字符串数组
            int x=0,y=0;
            for (String string:A){
                ////遍历字符串数组获取每一个部分内容,分别判断0索引对应的元素的内容
                // 判断从1号位置开始是否有连续的1到2位的数(数字是0-9）
                if(string.length()>3||string.length()<2)//length=3,2 DWSA+数字（两位以内）
                    continue;
                //subString(int beginIndex)返回一个字符串，该字符串是此字符串的子字符串。
                //子字符串以指定索引处的字符开头，并扩展到该字符串的末尾。
                //matches  如果true，字符串是否与给定的正则表达式匹配
                if(string.charAt(0)=='D' && string.substring(1).matches("[0-9]{1,2}"))
                    x+=Integer.parseInt(string.substring(1));
                if(string.charAt(0)=='W' && string.substring(1).matches("[0-9]{1,2}"))
                    y+=Integer.parseInt(string.substring(1));
                if(string.charAt(0)=='S' && string.substring(1).matches("[0-9]{1,2}"))
                    y-=Integer.parseInt(string.substring(1));
                if(string.charAt(0)=='A' && string.substring(1).matches("[0-9]{1,2}"))
                    x-=Integer.parseInt(string.substring(1));
            }
            System.out.println(x+","+y);
        }
        sc.close();
    }
}
