import java.util.Iterator;
import java.util.LinkedList;
import java.util.Scanner;
/*
小青蛙有一天不小心落入了一个地下迷宫,小青蛙希望用自己仅剩的  体力值P  跳出这个地下迷宫。
为了让问题简单,假设这是一个n*m的格子迷宫,迷宫每个位置为0或者1，
0代表这个位置有障碍物,小青蛙达到不了这个位置;
1代表小青蛙可以达到的位置。
小青蛙初始在(0,0)位置,地下迷宫的出口在(0,m-1)(保证这两个位置都是1,并且保证一定有起点到终点可达的路径),
小青蛙在迷宫中水平移动一个单位距离需要消耗1点体力值,
向上爬一个单位距离需要消耗3个单位的体力值,向下移动不消耗体力值,当小青蛙的体力值等于0的时候还没有到达出口,
小青蛙将无法逃离迷宫。现在需要你帮助小青蛙计算出能否用仅剩的体力值跳出迷宫(即达到(0,m-1)位置)。

输入描述：
输入包括n+1行:
第一行为三个整数n,m(3 <= m,n <= 10),P(1 <= P <= 100)
接下来的n行:
每行m个0或者1,以空格分隔
输出描述：
如果能逃离迷宫,则输出一行体力消耗最小的路径,输出格式见样例所示;
如果不能逃离迷宫,则输出"Can not escape!"。
 */
public class Grop {
    static int n,m,maxRemainEnergy=0;
    static int[][] map;
    static boolean flag=false;
    static String path="";
    static LinkedList<String> linkedList=new LinkedList<>();

    public static void main(String[] args) {
        Scanner sc=new Scanner(System.in);
        n=sc.nextInt();
        m=sc.nextInt();
        int P=sc.nextInt();
        map=new int[n][m];
        for (int i=0;i<n;i++){
            for (int j=0;j<m;j++){
                map[i][j]=sc.nextInt();
            }
        }
        runMap(0,0,P);
        if(!flag)
            System.out.println("Can not escape!");
        else
            System.out.println(path);
    }

    private static void runMap(int x, int y, int energy) {
        if (energy<0||x<0||y<0||x>=n||y>=m||map[x][y]!=1)
            return;
        else{
            linkedList.offer("["+x+","+y+"]");
            map[x][y]=0;//默认无障碍
            //出口位置
            if (x==0&&y==m-1){
                //剩余体力大于0，找到出口
                if(energy>=maxRemainEnergy){
                    maxRemainEnergy=energy;
                    updatePath();
                }
                map[x][y]=1;
                //递归中每个点的开始先加入队列，然后对于不满足的点或子递归结束的点 剔除队列
                linkedList.removeLast();
                flag=true;
                return;
            }
            //右
            runMap(x,y+1,energy-1);
            //下
            runMap(x+1,y,energy);
            //上
            runMap(x-1,y,energy-3);
            //左
            runMap(x,y-1,energy-1);
            map[x][y]=1;
            linkedList.removeLast();
        }
    }

    //确保消耗的体力值是最少的
    private static void updatePath() {
        StringBuilder stringBuilder=new StringBuilder();
        //Iterator 迭代器，进行遍历功能的一个接口
        Iterator<String> iterator=linkedList.iterator();
        while (iterator.hasNext()){
            stringBuilder.append(iterator.next()+",");
            if(stringBuilder.length()>0){
                stringBuilder.deleteCharAt(stringBuilder.length()-1);
                path=stringBuilder.toString();
            }
        }
    }
}
