import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;
/*
小青蛙有一天不小心落入了一个地下迷宫,小青蛙希望用自己仅剩的体力值P跳出这个地下迷宫。为了让问
题简单,假设这是一个n*m的格子迷宫,迷宫每个位置为0或者1,0代表这个位置有障碍物,小青蛙达到不了这个位
置;1代表小青蛙可以达到的位置。小青蛙初始在(0,0)位置,地下迷宫的出口在(0,m-1)(保证这两个位置都是1,并
且保证一定有起点到终点可达的路径),小青蛙在迷宫中水平移动一个单位距离需要消耗1点体力值,向上爬一个
单位距离需要消耗3个单位的体力值,向下移动不消耗体力值,当小青蛙的体力值等于0的时候还没有到达出口,小
青蛙将无法逃离迷宫。现在需要你帮助小青蛙计算出能否用仅剩的体力值跳出迷宫(即达到(0,m-1)位置)。

输入描述：
输入包括n+1行:
第一行为三个整数n,m(3 <= m,n <= 10),P(1 <= P <= 100)
接下来的n行:
每行m个0或者1,以空格分隔
输出描述：
如果能逃离迷宫,则输出一行体力消耗最小的路径,输出格式见样例所示;如果不能逃离迷宫,则输出"Can not
escape!"。 
 */
public class Main {
    public static void main(String[] args) {
        Scanner scanner=new Scanner(System.in);
        List<Integer> list=new ArrayList<>();
        int sum=0;
        int n=scanner.nextInt();
        for (int i=0;i<n;i++){
            int I=scanner.nextInt();//1或2
            int L=scanner.nextInt();//1<=L<=1 000 000 000
            if(I==1){
                //添加一个长度为L的木棒
                int j=0;
                for (;j<list.size();j++){
                    if(list.get(j)>=L){
                        list.add(j,L);
                        break;
                    }
                }
                if(list.size()==j){
                    list.add(L);
                }
                sum+=L;
            }else {
                list.remove(list.indexOf(L));
                sum-=L;
            }
            int max=list.get(list.size()-1);
            if(sum-max>max){
                //任意两边之和大于第三边
                System.out.println("Yes");
            }else {
                System.out.println("No");
            }
        }
    }
}
